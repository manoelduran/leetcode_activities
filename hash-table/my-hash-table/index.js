class HashTable {
  constructor() {
    this.size = 0;
    this.table = new Array(127);
  }

  // DJB2 Hash Function
  _hash(key) {
    let hash = 5381;
    for (let i = 0; i < key.length; i++) {
      hash = (hash * 33) ^ key.charCodeAt(i);
    }
    return Math.abs(hash) % this.table.length;
  }

  _resize() {
    const oldTable = this.table;
    this.table = new Array(this.table.length * 2);
    this.size = 0;
    for (const bucket of oldTable) {
      if (bucket) {
        for (const [key, value] of bucket) {
          this.set(key, value);
        }
      }
    }
  }

  has(key) {
    const index = this._hash(key);
    if (!this.table[index]) {
      return false;
    }
    for (let i = 0; i < this.table[index].length; i++) {
      if (this.table[index][i][0] === key) {
        return true;
      }
    }
    return false;
  }

  keys() {
    const keysArray = [];
    // bucket is an array of all elements generated by the hash function, it include the buckets that don't have any element
    for (const bucket of this.table) {
      if (bucket) {
        for (const [key] of bucket) {
          keysArray.push(key);
        }
      }
    }
    return keysArray;
  }

  values() {
    const valuesArray = [];
    for (const bucket of this.table) {
      if (bucket) {
        for (const [key, value] of bucket) {
          valuesArray.push(value);
        }
      }
    }
    return valuesArray;
  }

  clear() {
    this.table = new Array(127);
    this.size = 0;
  }

  set(key, value) {
    const index = this._hash(key);

    if (!this.table[index]) {
      this.table[index] = [];
      this.table[index].push([key, value]);
      this.size++;
      return;
    }

    // iterate inside all elements in the bucket, if any element has the same key, update the value
    for (let i = 0; i < this.table[index].length; i++) {
      if (this.table[index][i][0] === key) {
        this.table[index][i][1] = value;
        return;
      }
    }

    this.table[index].push([key, value]);
    this.size++;

    // if the size of the hash table is greater than 70% of the length of the table, resize the table, it will reduce the number of collisions and improve the performance using the dynamic resizing technique
    if (this.size / this.table.length > 0.7) this._resize();
  }

  get(key) {
    const index = this._hash(key);

    if (!this.table[index]) {
      return undefined;
    }

    for (const [k, v] of this.table[index]) {
      if (k === key) return v;
    }
  }

  remove(key) {
    const index = this._hash(key);
    if (!this.table[index]) {
      return false;
    }
    for (let i = 0; i < this.table[index].length; i++) {
      if (this.table[index][i][0] === key) {
        this.table[index].splice(i, 1);
        this.size--;
        return true;
      }
    }
    return false;
  }
}

const myHashTable = new HashTable();

myHashTable.set("age", "26");
myHashTable.set("country", "Spain");
myHashTable.set("name", "Manoel");
myHashTable.remove("name");
console.log(myHashTable.has("age"));
console.log(myHashTable.get("country"));
// console.log(myHashTable.clear());
console.log(myHashTable.get("country"));
console.log(myHashTable.keys());
console.log(myHashTable.values());
